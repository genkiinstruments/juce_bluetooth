diff --git a/dbus/gattlib.c b/dbus/gattlib.c
index a412d2d..8c0f2e6 100644
--- a/dbus/gattlib.c
+++ b/dbus/gattlib.c
@@ -211,7 +211,7 @@ int gattlib_connect(gattlib_adapter_t* adapter, const char *dst,
 		GATTLIB_LOG(GATTLIB_DEBUG, "gattlib_connect: Cannot find connection %s", dst);
 		ret = GATTLIB_INVALID_PARAMETER;
 		goto EXIT;
-	} else if (device->state != DISCONNECTED) {
+	} else if (!(device->state == CONNECTED || device->state == DISCONNECTED)) {
 		GATTLIB_LOG(GATTLIB_DEBUG, "gattlib_connect: Cannot connect to '%s'. Device is in state %s",
 			dst, device_state_str[device->state]);
 		ret = GATTLIB_BUSY;
@@ -221,10 +221,15 @@ int gattlib_connect(gattlib_adapter_t* adapter, const char *dst,
 	device->connection.on_connection.callback.connection_handler = connect_cb;
 	device->connection.on_connection.user_data = user_data;
 
-	GATTLIB_LOG(GATTLIB_DEBUG, "Connecting bluetooth device %s", dst);
+	if (device->state == DISCONNECTED) {
+		GATTLIB_LOG(GATTLIB_DEBUG, "Connecting bluetooth device %s", dst);
 
-	// Mark the device has disconnected
-	gattlib_device_set_state(device->adapter, device->device_id, CONNECTING);
+		// Mark the device has disconnected
+		gattlib_device_set_state(device->adapter, device->device_id, CONNECTING);
+	}
+	else if (device->state == CONNECTED) {
+		GATTLIB_LOG(GATTLIB_DEBUG, "Use existing connection for bluetooth device %s", dst);
+	}
 
 	OrgBluezDevice1* bluez_device = org_bluez_device1_proxy_new_for_bus_sync(
 			G_BUS_TYPE_SYSTEM,
@@ -254,6 +259,11 @@ int gattlib_connect(gattlib_adapter_t* adapter, const char *dst,
 		G_CALLBACK(on_handle_device_property_change),
 		&device->connection);
 
+	if (device->state == CONNECTED) {
+		g_main_context_invoke(NULL, (GSourceFunc)_on_device_connect, &device->connection);
+		goto EXIT;
+	}
+
 	error = NULL;
 	org_bluez_device1_call_connect_sync(bluez_device, NULL, &error);
 	if (error) {
diff --git a/dbus/gattlib_adapter.c b/dbus/gattlib_adapter.c
index 550fbaa..de9a1ca 100644
--- a/dbus/gattlib_adapter.c
+++ b/dbus/gattlib_adapter.c
@@ -766,3 +766,77 @@ EXIT:
 	g_rec_mutex_unlock(&m_gattlib_mutex);
 	return ret;
 }
+
+int gattlib_adapter_probe_connected_devices(gattlib_adapter_t* adapter, gattlib_discovered_device_t discovered_device_cb, void* user_data)
+{
+    GDBusObjectManager *device_manager = NULL;
+    GError *error = NULL;
+    GList *objects = NULL;
+    GList *l = NULL;
+
+    // Get Device Manager from adapter
+	device_manager = get_device_manager_from_adapter(adapter, &error);
+
+	// Get list of objects belonging to Device Manager
+    objects = g_dbus_object_manager_get_objects(device_manager);
+
+    for (l = objects; l != NULL; l = l->next) {
+        GDBusObject *object = G_DBUS_OBJECT(l->data);
+        GDBusInterface *interface;
+        GDBusProxy *proxy;
+        const char *object_path;
+        GVariant *connected_variant;
+        GVariant *name_variant;
+        GVariant *address_variant;
+        gboolean connected;
+        const char *name;
+        const char *address;
+
+        object_path = g_dbus_object_get_object_path(object);
+
+        // Check if this is a device (contains "dev_" in path)
+        if (!strstr(object_path, "/dev_")) {
+            continue;
+        }
+
+        interface = g_dbus_object_get_interface(object, "org.bluez.Device1");
+        if (!interface) {
+            continue;
+        }
+
+        proxy = G_DBUS_PROXY(interface);
+
+        // Get Connected property
+        connected_variant = g_dbus_proxy_get_cached_property(proxy, "Connected");
+        if (connected_variant) {
+            connected = g_variant_get_boolean(connected_variant);
+            g_variant_unref(connected_variant);
+
+            // Only process if device is connected
+            if (connected) {
+                name_variant = g_dbus_proxy_get_cached_property(proxy, "Name");
+                address_variant = g_dbus_proxy_get_cached_property(proxy, "Address");
+
+                if (address_variant) {
+                    address = g_variant_get_string(address_variant, NULL);
+                    name = name_variant ? g_variant_get_string(name_variant, NULL) : "";
+
+                    gattlib_device_set_state(adapter, object_path, CONNECTED);
+
+                    discovered_device_cb(adapter, address, name, user_data);
+
+                    if (name_variant)
+                        g_variant_unref(name_variant);
+
+                    g_variant_unref(address_variant);
+                }
+            }
+        }
+
+        g_object_unref(interface);
+    }
+
+    g_list_free_full(objects, g_object_unref);
+
+    return GATTLIB_SUCCESS;
+}
diff --git a/include/gattlib.h b/include/gattlib.h
index 90c7c0a..a37b1dd 100644
--- a/include/gattlib.h
+++ b/include/gattlib.h
@@ -341,6 +341,8 @@ int gattlib_adapter_scan_eddystone(gattlib_adapter_t* adapter, int16_t rssi_thre
  */
 int gattlib_adapter_scan_disable(gattlib_adapter_t* adapter);
 
+int gattlib_adapter_probe_connected_devices(gattlib_adapter_t* adapter, gattlib_discovered_device_t discovered_device_cb, void* user_data);
+
 /**
  * @brief Close Bluetooth adapter context
  *
